"""Modul pro import/export diagram≈Ø do/z JSON form√°tu (persistence).

Zaji≈°≈•uje ukl√°d√°n√≠ a naƒç√≠t√°n√≠ kompletn√≠ho stavu diagramu vƒçetnƒõ pozic, 
velikost√≠ uzl≈Ø, typ≈Ø vazeb a v≈°ech metadat.
"""
import json
import os
import re
from dataclasses import asdict
from typing import Dict, Any, List

from PySide6.QtCore import QPointF, QRectF
from PySide6.QtWidgets import QFileDialog, QMessageBox, QGraphicsItem
from graphics.nodes import ObjectItem, ProcessItem, StateItem
from graphics.link import LinkItem
from constants import NODE_W, NODE_H, STATE_W, STATE_H, LINK_TYPES, PROCEDURAL_TYPES, STRUCTURAL_TYPES, GRID_SIZE
from utils.ids import next_id
from opd.models import DiagramNode, DiagramLink


def safe_base_filename(title: str | None = None) -> str:
    """
    Vytvo≈ô√≠ bezpeƒçn√Ω n√°zev souboru z n√°zvu tabu (odstran√≠ zak√°zan√© znaky).
    
    Args:
        title: N√°zev tabu/diagramu
    
    Returns:
        Bezpeƒçn√Ω n√°zev souboru (bez p≈ô√≠pony)
    """
    base = (title or "OPD").strip()
    # Odstran√≠ emoji prefixy (ikonky dom√°ƒçku a zoomu)
    base = base.replace("üîç ", "").replace("üè† ", "").strip()
    # Nahrad√≠ zak√°zan√© znaky podtr≈æ√≠tkem
    base = re.sub(r'[\\/*?:"<>|]+', "_", base)
    base = re.sub(r"\s+", "_", base)  # V√≠ce mezer ‚Üí jedno podtr≈æ√≠tko
    return base or "Canvas"
    

def scene_to_dict(scene) -> Dict[str, Any]:
    """
    P≈ôevede sc√©nu s diagramem na slovn√≠k (pro JSON export).
    
    Args:
        scene: QGraphicsScene obsahuj√≠c√≠ diagram
    
    Returns:
        Slovn√≠k s kl√≠ƒçi "nodes", "links" a "meta"
    """
    nodes: List[DiagramNode] = []  # Seznam uzl≈Ø pro export
    links: List[DiagramLink] = []  # Seznam vazeb pro export
    
    # === Sbƒõr uzl≈Ø (objekty, procesy, stavy) ===
    for it in scene.items():
        if isinstance(it, (ObjectItem, ProcessItem)):
            r_scene = it.mapRectToScene(it.rect())
            nodes.append(DiagramNode(
                id=it.node_id,
                kind=it.kind,
                label=it.label,
                x=r_scene.center().x(),
                y=r_scene.center().y(),
                w=r_scene.width(),
                h=r_scene.height(),
                parent_process_id=getattr(it, 'parent_process_id', None),
                essence=it.essence,
                affiliation=it.affiliation
            ))
            if isinstance(it, ObjectItem):
                for ch in it.childItems():
                    if isinstance(ch, StateItem):
                        sr = ch.mapRectToScene(ch.rect())
                        nodes.append(DiagramNode(
                            id=ch.node_id,
                            kind="state",
                            label=ch.label,
                            x=sr.center().x(),
                            y=sr.center().y(),
                            w=sr.width(),
                            h=sr.height(),
                            parent_id=it.node_id
                        ))
                        
    for it in scene.items():
        if isinstance(it, LinkItem):
            links.append(DiagramLink(
                id=next_id("link"),
                src=getattr(it.src, "node_id", ""),
                dst=getattr(it.dst, "node_id", ""),
                link_type=it.link_type,
                label=it.label,
                type_dx=getattr(it, "_type_offset", QPointF(6,-6)).x(),
                type_dy=getattr(it, "_type_offset", QPointF(6,-6)).y(),
                label_dx=(getattr(it, "_label_offset", QPointF(6,12)).x()
                          if getattr(it, "ti_label", None) else 6.0),
                label_dy=(getattr(it, "_label_offset", QPointF(6,12)).y()
                          if getattr(it, "ti_label", None) else 12.0),
                card_src=it.card_src if hasattr(it, "card_src") else "",
                card_dst=it.card_dst if hasattr(it, "card_dst") else "",
            ))
            
    return {
        "nodes": [asdict(n) for n in nodes],
        "links": [asdict(l) for l in links],
        "meta": {"format": "opm-mvp-json", "version": 1}
    }
    

def dict_to_scene(scene, data: Dict[str, Any], allowed_link) -> None:
    """
    Naƒçte slovn√≠k (z JSON) do sc√©ny.
    
    Args:
        scene: C√≠lov√° QGraphicsScene
        data: Slovn√≠k s kl√≠ƒçi "nodes" a "links"
        allowed_link: Callback funkce pro validaci vazeb
    """
    scene.clear()  # Vyƒçist√≠ sc√©nu p≈ôed naƒçten√≠m
    id_to_item: Dict[str, QGraphicsItem] = {}  # Mapov√°n√≠ ID ‚Üí item pro propojen√≠ vazeb
    
    for n in data.get("nodes", []):
        kind = n["kind"]
        pos = QPointF(n["x"], n["y"])
        if kind == "object":
            it = ObjectItem(
                QRectF(-n["w"]/2, -n["h"]/2, n["w"], n["h"]), 
                n["label"],
                essence=n.get("essence", "informatical"),
                affiliation=n.get("affiliation", "systemic")
            )
            it.node_id = n["id"]
            it.parent_process_id = n.get("parent_process_id")
            it.setPos(pos)
            scene.addItem(it)
            id_to_item[n["id"]] = it
            
    for n in data.get("nodes", []):
        if n["kind"] == "process":
            it = ProcessItem(
                QRectF(-n["w"]/2, -n["h"]/2, n["w"], n["h"]), 
                n["label"],
                essence=n.get("essence", "informatical"),
                affiliation=n.get("affiliation", "systemic")
            )
            it.node_id = n["id"]
            it.parent_process_id = n.get("parent_process_id")
            it.setPos(QPointF(n["x"], n["y"]))
            scene.addItem(it); id_to_item[n["id"]] = it
            
    for n in data.get("nodes", []):
        if n["kind"] == "state" and n.get("parent_id") in id_to_item:
            parent = id_to_item[n["parent_id"]]
            local_center = parent.mapFromScene(QPointF(n["x"], n["y"]))
            rect = QRectF(local_center.x()-n["w"]/2, local_center.y()-n["h"]/2, n["w"], n["h"])
            it = StateItem(parent, rect, n["label"])
            it.node_id = n["id"]
            scene.addItem(it)
            id_to_item[n["id"]] = it

    invalid = 0
    for l in data.get("links", []):
        src = id_to_item.get(l["src"])
        dst = id_to_item.get(l["dst"])
        if src and dst:
            lt = l.get("link_type", "consumption")
            ok, msg = allowed_link(src, dst, lt)
            if not ok:
                invalid += 1
                continue
            li = LinkItem(src, dst, lt, l.get("label", ""))
            scene.addItem(li)    
            li._type_offset  = QPointF(l.get("type_dx", 6.0),  l.get("type_dy", -6.0))
            li._label_offset = QPointF(l.get("label_dx", 6.0), l.get("label_dy", 12.0))
            li.set_card_src(l.get("card_src", ""))
            li.set_card_dst(l.get("card_dst", ""))
            li.update_path()
            
    if invalid:
        QMessageBox.warning(None, "Nƒõkter√© vazby p≈ôeskoƒçeny",
                            f"{invalid} neplatn√Ωch vazeb bylo p≈ôi naƒç√≠t√°n√≠ p≈ôeskoƒçeno.")
        
        
def save_scene_as_json(scene, title: str | None = None, main_window=None):
    """
    Ulo≈æ√≠ diagram do JSON souboru (s dialogem pro v√Ωbƒõr cesty).
    
    Pokud je poskytnut main_window, ulo≈æ√≠ cel√Ω glob√°ln√≠ datov√Ω model vƒçetnƒõ
    v≈°ech zoom-in hierarchi√≠. Jinak ulo≈æ√≠ pouze aktu√°ln√≠ sc√©nu.
    
    Args:
        scene: Sc√©na k ulo≈æen√≠ (pou≈æije se pro zpƒõtnou kompatibilitu)
        title: N√°zev tabu (pou≈æije se jako v√Ωchoz√≠ n√°zev souboru)
        main_window: MainWindow instance pro p≈ô√≠stup k _global_diagram_data
    """
    base = safe_base_filename(title)
    path, _ = QFileDialog.getSaveFileName(None, "Save OPD (JSON)", f"{base}.json", "JSON (*.json)")
    if not path: 
        return
    
    # Pokud m√°me main_window, ulo≈æ√≠me cel√Ω glob√°ln√≠ model (vƒçetnƒõ hierarchi√≠)
    if main_window and hasattr(main_window, '_global_diagram_data'):
        # Nejd≈ô√≠v synchronizujme aktu√°ln√≠ sc√©nu do glob√°ln√≠ho modelu
        current_view = None
        parent_process_id = None
        for i in range(main_window.tabs.count()):
            view = main_window.tabs.widget(i)
            if view.scene() == scene:
                current_view = view
                parent_process_id = getattr(view, 'zoomed_process_id', None)
                break
        
        if current_view:
            main_window.sync_scene_to_global_model(scene, parent_process_id)
        
        # Ulo≈æme cel√Ω glob√°ln√≠ datov√Ω model
        data_to_save = {
            "nodes": main_window._global_diagram_data.get("nodes", []),
            "links": main_window._global_diagram_data.get("links", []),
            "meta": {
                **main_window._global_diagram_data.get("meta", {}),
                "format": "opm-mvp-json-hierarchy",
                "version": 2  # Verze 2 podporuje hierarchie
            }
        }
    else:
        # Zpƒõtn√° kompatibilita - ulo≈æ√≠me jen aktu√°ln√≠ sc√©nu
        data_to_save = scene_to_dict(scene)
        data_to_save["meta"] = data_to_save.get("meta", {})
        data_to_save["meta"]["format"] = "opm-mvp-json"
        data_to_save["meta"]["version"] = 1
    
    # Ulo≈æen√≠ do souboru s UTF-8 encoding a odsazen√≠m pro ƒçitelnost
    with open(path, "w", encoding="utf-8") as f: 
        json.dump(data_to_save, f, ensure_ascii=False, indent=2)


def load_scene_from_json(scene, allowed_link, new_canvas_callback=None, new_tab: bool = False, main_window=None):
    """
    Naƒçte diagram z JSON souboru (s dialogem pro v√Ωbƒõr souboru).
    
    Pokud soubor obsahuje hierarchii (verze 2), naƒçte v≈°echny canvasy vƒçetnƒõ zoom-in hierarchi√≠.
    Jinak naƒçte pouze aktu√°ln√≠ sc√©nu (zpƒõtn√° kompatibilita).
    
    Args:
        scene: Aktu√°ln√≠ sc√©na (pou≈æije se pokud new_tab=False a nen√≠ hierarchie)
        allowed_link: Callback pro validaci vazeb
        new_canvas_callback: Funkce pro vytvo≈ôen√≠ nov√©ho tabu
        new_tab: Pokud True, naƒçte do nov√©ho tabu; jinak do aktu√°ln√≠ sc√©ny
        main_window: MainWindow instance pro naƒçten√≠ hierarchi√≠ (pokud None, jen aktu√°ln√≠ sc√©na)
    """
    caption = "Import OPD"
    path, _ = QFileDialog.getOpenFileName(None, caption, "", "JSON (*.json)")
    if not path:
        return
    
    # Naƒçten√≠ JSON souboru
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)

    # Zkontroluj verzi/form√°t
    meta = data.get("meta", {})
    format_version = meta.get("version", 1)
    format_type = meta.get("format", "opm-mvp-json")
    
    # Pokud je to hierarchie (verze 2) a m√°me main_window, naƒçteme celou hierarchii
    if format_version >= 2 and "hierarchy" in format_type and main_window:
        _load_hierarchy_from_json(main_window, data, allowed_link)
    else:
        # Zpƒõtn√° kompatibilita - naƒçteme jen aktu√°ln√≠ sc√©nu
        target_scene = scene
        if new_tab and new_canvas_callback:
            # Vytvo≈ô√≠ nov√Ω tab s n√°zvem podle souboru
            base = os.path.splitext(os.path.basename(path))[0] or "Canvas"
            view = new_canvas_callback(base)
            target_scene = view.scene()

        # Naƒçten√≠ dat do sc√©ny
        dict_to_scene(target_scene, data, allowed_link)


def _load_hierarchy_from_json(main_window, data: Dict[str, Any], allowed_link):
    """
    Naƒçte hierarchii diagramu vƒçetnƒõ v≈°ech zoom-in canvas≈Ø.
    
    Args:
        main_window: MainWindow instance
        data: Naƒçten√° data z JSON
        allowed_link: Callback pro validaci vazeb
    """
    # Nejd≈ô√≠v vyma≈æeme v≈°echny existuj√≠c√≠ taby (kromƒõ root)
    # nebo vytvo≈ô√≠me nov√Ω root canvas
    nodes = data.get("nodes", [])
    links = data.get("links", [])
    
    # Vytvo≈ô√≠me procesn√≠ mapu (process_id -> process_data)
    process_map = {n["id"]: n for n in nodes if n.get("kind") == "process"}
    
    # Najdeme procesy, kter√© maj√≠ podprocesy/objekty (ty pot≈ôebuj√≠ in-zoom canvas)
    processes_with_children = set()
    for node in nodes:
        parent_id = node.get("parent_process_id")
        if parent_id and parent_id in process_map:
            processes_with_children.add(parent_id)
    
    # Ulo≈æ√≠me data do glob√°ln√≠ho modelu
    main_window._global_diagram_data = {
        "nodes": nodes,
        "links": links,
        "meta": data.get("meta", {})
    }
    
    # Vytvo≈ô√≠me root canvas a naƒçteme do nƒõj prvky s parent_process_id == None
    # Nejd≈ô√≠v sma≈æeme v≈°echny existuj√≠c√≠ taby
    while main_window.tabs.count() > 0:
        main_window.tabs.removeTab(0)
    
    # Vytvo≈ô√≠me root canvas
    root_name = "üè† Root Canvas"
    if hasattr(main_window, '_root_canvas_name'):
        root_name = main_window._root_canvas_name
    root_view = main_window._new_canvas(root_name)
    root_scene = root_view.scene()
    
    # Ujist√≠me se, ≈æe root_canvas_name je nastaveno
    if hasattr(main_window, '_root_canvas_name'):
        main_window._root_canvas_name = root_name
    
    # Naƒçteme root prvky (parent_process_id == None)
    root_data = {
        "nodes": [n for n in nodes if n.get("parent_process_id") is None],
        "links": [],  # Linky se naƒçtou podle uzl≈Ø
        "meta": data.get("meta", {})
    }
    
    # Naƒçteme linky, kter√© spojuj√≠ root uzly
    root_node_ids = {n["id"] for n in root_data["nodes"]}
    root_data["links"] = [
        l for l in links
        if l.get("src") in root_node_ids and l.get("dst") in root_node_ids
    ]
    
    dict_to_scene(root_scene, root_data, allowed_link)
    
    # Pro ka≈æd√Ω proces s podprocesy vytvo≈ô√≠me in-zoom canvas
    # Mus√≠me to dƒõlat rekurzivnƒõ, ale nejd≈ô√≠v vytvo≈ô√≠me v≈°echny procesy v root sc√©nƒõ
    # Pak projdeme hierarchii a vytvo≈ô√≠me in-zoom canvasy
    
    def create_in_zoom_canvases(parent_process_id: str | None, parent_view):
        """Rekurzivnƒõ vytvo≈ô√≠ in-zoom canvasy pro v≈°echny procesy s dƒõtmi."""
        # Najdi procesy, kter√© pat≈ô√≠ do tohoto parent_process_id
        child_processes = [
            p for p in process_map.values()
            if p.get("parent_process_id") == parent_process_id
        ]
        
        for process in child_processes:
            process_id = process["id"]
            
            # Pokud m√° tento proces dƒõti, vytvo≈ô pro nƒõj in-zoom canvas
            if process_id in processes_with_children:
                # Vytvo≈ô in-zoom canvas
                tab_title = f"üîç {process.get('label', 'Process')}"
                zoom_view = main_window._new_canvas(
                    title=tab_title,
                    parent_view=parent_view,
                    zoomed_process_id=process_id
                )
                zoom_scene = zoom_view.scene()
                
                # Naƒçti prvky pro tento proces
                process_data = {
                    "nodes": [n for n in nodes if n.get("parent_process_id") == process_id],
                    "links": [],
                    "meta": data.get("meta", {})
                }
                
                # Naƒçti linky pro tento proces
                process_node_ids = {n["id"] for n in process_data["nodes"]}
                process_data["links"] = [
                    l for l in links
                    if l.get("src") in process_node_ids and l.get("dst") in process_node_ids
                ]
                
                dict_to_scene(zoom_scene, process_data, allowed_link)
                
                # Rekurzivnƒõ vytvo≈ô canvasy pro podprocesy
                create_in_zoom_canvases(process_id, zoom_view)
    
    # Zaƒçnƒõme s root procesy
    create_in_zoom_canvases(None, root_view)
    
    # P≈ôepneme na root canvas
    main_window.tabs.setCurrentIndex(0)
    
    # Refresh hierarchie
    if hasattr(main_window, 'refresh_hierarchy_panel'):
        main_window.refresh_hierarchy_panel()